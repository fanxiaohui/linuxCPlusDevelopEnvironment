字节序 数组和栈的关系 栈顶的定义

这里在项目中 
在核心网代码 生成IP地址时 是小端存储的 数组第四个字节放我们的高位 你在nms平台看到的是大端字节序 数据库存的都是大端的 所以你的数组第四个字节放你的固定高位就可以 如果for循环打印要和你在nms平台看到的顺序相反 就对了


而mac电脑自带的计算器
也是 大端显示 16进制 和 二进制数据格式

那么在编程小端字节序数据时先明白几点

第一 小端模式 时 高位字节 存储在 栈的高地址  远离栈顶

	大端模式 时 高位字节存储在 栈顶

第二 回忆栈顶在哪里

理顺一下数组  数组 和栈什么关系呢

数组的实现 是用栈实现的 这个可以看最原始的c的数组的定义
那么 到面向对象时 其实一般的编程开发 都是字符串数组 或者 整型 或者 对象数组
并不存在 字节序问题
而且默认 我们在存储这些数据时 数组 这时的数组 数据结构 已经 远超c语言中的数组
定义 但依旧还是栈的数据结构

那么当我们面向对象byte数组 或者 c语言中 uint8数组时
此时考虑 高位和 低位
要考虑字节序问题 
那么 就要明白 栈顶在哪里

第三 理顺数组和栈的关系

数组可以随时访问其中的任意一个元素，也就是支持随机存取；
栈每次只能把元素插入到第一个位置（栈顶），每次只能读取栈顶的元素。
栈可以用数组实现，即限制数组的访问权限，把随机访问限制为只允许存取第一个元素。
当然栈插入一个元素之后原来的第一个元素就变成了第二个原素了，删除一个元素之后第二个元素就变成第一个元素了。

数组与栈有相似的地方，但是数组可以根据数组下标访问数组元素，而栈只能访问栈顶元素，即“后进先出”







